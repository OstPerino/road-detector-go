// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.1
// source: road_marking.proto

package road_marking

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Координаты точки
type Coordinates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lat           float64                `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"` // Широта
	Lon           float64                `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"` // Долгота
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Coordinates) Reset() {
	*x = Coordinates{}
	mi := &file_road_marking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinates) ProtoMessage() {}

func (x *Coordinates) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinates.ProtoReflect.Descriptor instead.
func (*Coordinates) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{0}
}

func (x *Coordinates) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Coordinates) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

// Запрос на анализ дорожной разметки
type AnalyzeRoadMarkingRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	VideoData      []byte                 `protobuf:"bytes,1,opt,name=video_data,json=videoData,proto3" json:"video_data,omitempty"`                   // Данные видеофайла
	VideoFilename  string                 `protobuf:"bytes,2,opt,name=video_filename,json=videoFilename,proto3" json:"video_filename,omitempty"`       // Имя видеофайла
	StartPoint     *Coordinates           `protobuf:"bytes,3,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty"`                // Начальная точка маршрута
	EndPoint       *Coordinates           `protobuf:"bytes,4,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`                      // Конечная точка маршрута
	SegmentLengthM int32                  `protobuf:"varint,5,opt,name=segment_length_m,json=segmentLengthM,proto3" json:"segment_length_m,omitempty"` // Длина сегмента в метрах
	RouteId        string                 `protobuf:"bytes,6,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`                         // ID маршрута для сохранения в БД
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AnalyzeRoadMarkingRequest) Reset() {
	*x = AnalyzeRoadMarkingRequest{}
	mi := &file_road_marking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeRoadMarkingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRoadMarkingRequest) ProtoMessage() {}

func (x *AnalyzeRoadMarkingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRoadMarkingRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRoadMarkingRequest) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyzeRoadMarkingRequest) GetVideoData() []byte {
	if x != nil {
		return x.VideoData
	}
	return nil
}

func (x *AnalyzeRoadMarkingRequest) GetVideoFilename() string {
	if x != nil {
		return x.VideoFilename
	}
	return ""
}

func (x *AnalyzeRoadMarkingRequest) GetStartPoint() *Coordinates {
	if x != nil {
		return x.StartPoint
	}
	return nil
}

func (x *AnalyzeRoadMarkingRequest) GetEndPoint() *Coordinates {
	if x != nil {
		return x.EndPoint
	}
	return nil
}

func (x *AnalyzeRoadMarkingRequest) GetSegmentLengthM() int32 {
	if x != nil {
		return x.SegmentLengthM
	}
	return 0
}

func (x *AnalyzeRoadMarkingRequest) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

// Информация о сегменте
type SegmentInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SegmentId          int32                  `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`                             // ID сегмента
	FramesCount        int32                  `protobuf:"varint,2,opt,name=frames_count,json=framesCount,proto3" json:"frames_count,omitempty"`                       // Количество кадров в сегменте
	CoveragePercentage float64                `protobuf:"fixed64,3,opt,name=coverage_percentage,json=coveragePercentage,proto3" json:"coverage_percentage,omitempty"` // Процент покрытия разметкой
	HasData            bool                   `protobuf:"varint,4,opt,name=has_data,json=hasData,proto3" json:"has_data,omitempty"`                                   // Есть ли данные в сегменте
	StartCoordinate    *Coordinates           `protobuf:"bytes,5,opt,name=start_coordinate,json=startCoordinate,proto3" json:"start_coordinate,omitempty"`            // Начальная координата сегмента
	EndCoordinate      *Coordinates           `protobuf:"bytes,6,opt,name=end_coordinate,json=endCoordinate,proto3" json:"end_coordinate,omitempty"`                  // Конечная координата сегмента
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SegmentInfo) Reset() {
	*x = SegmentInfo{}
	mi := &file_road_marking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentInfo) ProtoMessage() {}

func (x *SegmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentInfo.ProtoReflect.Descriptor instead.
func (*SegmentInfo) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{2}
}

func (x *SegmentInfo) GetSegmentId() int32 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *SegmentInfo) GetFramesCount() int32 {
	if x != nil {
		return x.FramesCount
	}
	return 0
}

func (x *SegmentInfo) GetCoveragePercentage() float64 {
	if x != nil {
		return x.CoveragePercentage
	}
	return 0
}

func (x *SegmentInfo) GetHasData() bool {
	if x != nil {
		return x.HasData
	}
	return false
}

func (x *SegmentInfo) GetStartCoordinate() *Coordinates {
	if x != nil {
		return x.StartCoordinate
	}
	return nil
}

func (x *SegmentInfo) GetEndCoordinate() *Coordinates {
	if x != nil {
		return x.EndCoordinate
	}
	return nil
}

// Общая статистика
type OverallStats struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TotalFrames         int32                  `protobuf:"varint,1,opt,name=total_frames,json=totalFrames,proto3" json:"total_frames,omitempty"`                            // Общее количество кадров
	TotalDistanceMeters float64                `protobuf:"fixed64,2,opt,name=total_distance_meters,json=totalDistanceMeters,proto3" json:"total_distance_meters,omitempty"` // Общее расстояние в метрах
	SegmentLengthMeters int32                  `protobuf:"varint,3,opt,name=segment_length_meters,json=segmentLengthMeters,proto3" json:"segment_length_meters,omitempty"`  // Длина сегмента в метрах
	TotalSegments       int32                  `protobuf:"varint,4,opt,name=total_segments,json=totalSegments,proto3" json:"total_segments,omitempty"`                      // Общее количество сегментов
	SegmentsWithData    int32                  `protobuf:"varint,5,opt,name=segments_with_data,json=segmentsWithData,proto3" json:"segments_with_data,omitempty"`           // Количество сегментов с данными
	AverageCoverage     float64                `protobuf:"fixed64,6,opt,name=average_coverage,json=averageCoverage,proto3" json:"average_coverage,omitempty"`               // Средний процент покрытия
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OverallStats) Reset() {
	*x = OverallStats{}
	mi := &file_road_marking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OverallStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverallStats) ProtoMessage() {}

func (x *OverallStats) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverallStats.ProtoReflect.Descriptor instead.
func (*OverallStats) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{3}
}

func (x *OverallStats) GetTotalFrames() int32 {
	if x != nil {
		return x.TotalFrames
	}
	return 0
}

func (x *OverallStats) GetTotalDistanceMeters() float64 {
	if x != nil {
		return x.TotalDistanceMeters
	}
	return 0
}

func (x *OverallStats) GetSegmentLengthMeters() int32 {
	if x != nil {
		return x.SegmentLengthMeters
	}
	return 0
}

func (x *OverallStats) GetTotalSegments() int32 {
	if x != nil {
		return x.TotalSegments
	}
	return 0
}

func (x *OverallStats) GetSegmentsWithData() int32 {
	if x != nil {
		return x.SegmentsWithData
	}
	return 0
}

func (x *OverallStats) GetAverageCoverage() float64 {
	if x != nil {
		return x.AverageCoverage
	}
	return 0
}

// Маршрут как сущность
type Route struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                  // Уникальный ID маршрута
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                              // Название маршрута
	StartPoint     *Coordinates           `protobuf:"bytes,3,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty"`                // Начальная точка
	EndPoint       *Coordinates           `protobuf:"bytes,4,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`                      // Конечная точка
	SegmentLengthM int32                  `protobuf:"varint,5,opt,name=segment_length_m,json=segmentLengthM,proto3" json:"segment_length_m,omitempty"` // Длина сегмента в метрах
	OverallStats   *OverallStats          `protobuf:"bytes,6,opt,name=overall_stats,json=overallStats,proto3" json:"overall_stats,omitempty"`          // Общая статистика
	Segments       []*SegmentInfo         `protobuf:"bytes,7,rep,name=segments,proto3" json:"segments,omitempty"`                                      // Сегменты маршрута
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                   // Время создания
	VideoFilename  string                 `protobuf:"bytes,9,opt,name=video_filename,json=videoFilename,proto3" json:"video_filename,omitempty"`       // Имя сохраненного видеофайла
	VideoPath      string                 `protobuf:"bytes,10,opt,name=video_path,json=videoPath,proto3" json:"video_path,omitempty"`                  // Путь к сохраненному видео
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Route) Reset() {
	*x = Route{}
	mi := &file_road_marking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{4}
}

func (x *Route) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Route) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Route) GetStartPoint() *Coordinates {
	if x != nil {
		return x.StartPoint
	}
	return nil
}

func (x *Route) GetEndPoint() *Coordinates {
	if x != nil {
		return x.EndPoint
	}
	return nil
}

func (x *Route) GetSegmentLengthM() int32 {
	if x != nil {
		return x.SegmentLengthM
	}
	return 0
}

func (x *Route) GetOverallStats() *OverallStats {
	if x != nil {
		return x.OverallStats
	}
	return nil
}

func (x *Route) GetSegments() []*SegmentInfo {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *Route) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Route) GetVideoFilename() string {
	if x != nil {
		return x.VideoFilename
	}
	return ""
}

func (x *Route) GetVideoPath() string {
	if x != nil {
		return x.VideoPath
	}
	return ""
}

// Ответ с результатами анализа
type AnalyzeRoadMarkingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                 // Статус операции
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                               // Сообщение
	OverallStats  *OverallStats          `protobuf:"bytes,3,opt,name=overall_stats,json=overallStats,proto3" json:"overall_stats,omitempty"` // Общая статистика
	Segments      []*SegmentInfo         `protobuf:"bytes,4,rep,name=segments,proto3" json:"segments,omitempty"`                             // Информация о сегментах
	RouteId       string                 `protobuf:"bytes,5,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`                // ID сохраненного маршрута
	ErrorMessage  string                 `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Сообщение об ошибке (если есть)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeRoadMarkingResponse) Reset() {
	*x = AnalyzeRoadMarkingResponse{}
	mi := &file_road_marking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeRoadMarkingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRoadMarkingResponse) ProtoMessage() {}

func (x *AnalyzeRoadMarkingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRoadMarkingResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeRoadMarkingResponse) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{5}
}

func (x *AnalyzeRoadMarkingResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AnalyzeRoadMarkingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AnalyzeRoadMarkingResponse) GetOverallStats() *OverallStats {
	if x != nil {
		return x.OverallStats
	}
	return nil
}

func (x *AnalyzeRoadMarkingResponse) GetSegments() []*SegmentInfo {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *AnalyzeRoadMarkingResponse) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *AnalyzeRoadMarkingResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Запрос получения сегментов по координатам
type GetSegmentsByAreaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NorthEast     *Coordinates           `protobuf:"bytes,1,opt,name=north_east,json=northEast,proto3" json:"north_east,omitempty"` // Северо-восточный угол области
	SouthWest     *Coordinates           `protobuf:"bytes,2,opt,name=south_west,json=southWest,proto3" json:"south_west,omitempty"` // Юго-западный угол области
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSegmentsByAreaRequest) Reset() {
	*x = GetSegmentsByAreaRequest{}
	mi := &file_road_marking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSegmentsByAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentsByAreaRequest) ProtoMessage() {}

func (x *GetSegmentsByAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentsByAreaRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentsByAreaRequest) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{6}
}

func (x *GetSegmentsByAreaRequest) GetNorthEast() *Coordinates {
	if x != nil {
		return x.NorthEast
	}
	return nil
}

func (x *GetSegmentsByAreaRequest) GetSouthWest() *Coordinates {
	if x != nil {
		return x.SouthWest
	}
	return nil
}

// Ответ с сегментами в области
type GetSegmentsByAreaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                 // Статус операции
	Routes        []*Route               `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`                                 // Маршруты в области
	TotalRoutes   int32                  `protobuf:"varint,3,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`   // Общее количество маршрутов
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Сообщение об ошибке (если есть)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSegmentsByAreaResponse) Reset() {
	*x = GetSegmentsByAreaResponse{}
	mi := &file_road_marking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSegmentsByAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentsByAreaResponse) ProtoMessage() {}

func (x *GetSegmentsByAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentsByAreaResponse.ProtoReflect.Descriptor instead.
func (*GetSegmentsByAreaResponse) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{7}
}

func (x *GetSegmentsByAreaResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetSegmentsByAreaResponse) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *GetSegmentsByAreaResponse) GetTotalRoutes() int32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *GetSegmentsByAreaResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Запрос на получение маршрута по ID
type GetRouteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RouteId       string                 `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"` // ID маршрута
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRouteRequest) Reset() {
	*x = GetRouteRequest{}
	mi := &file_road_marking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteRequest) ProtoMessage() {}

func (x *GetRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteRequest.ProtoReflect.Descriptor instead.
func (*GetRouteRequest) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{8}
}

func (x *GetRouteRequest) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

// Ответ с маршрутом
type GetRouteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                 // Статус операции
	Route         *Route                 `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`                                   // Данные маршрута
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Сообщение об ошибке (если есть)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRouteResponse) Reset() {
	*x = GetRouteResponse{}
	mi := &file_road_marking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteResponse) ProtoMessage() {}

func (x *GetRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteResponse.ProtoReflect.Descriptor instead.
func (*GetRouteResponse) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{9}
}

func (x *GetRouteResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetRouteResponse) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *GetRouteResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Запрос на удаление маршрута
type DeleteRouteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RouteId       string                 `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"` // ID маршрута
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRouteRequest) Reset() {
	*x = DeleteRouteRequest{}
	mi := &file_road_marking_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteRequest) ProtoMessage() {}

func (x *DeleteRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteRequest) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRouteRequest) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

// Ответ удаления маршрута
type DeleteRouteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                 // Статус операции
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                               // Сообщение
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Сообщение об ошибке (если есть)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRouteResponse) Reset() {
	*x = DeleteRouteResponse{}
	mi := &file_road_marking_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteResponse) ProtoMessage() {}

func (x *DeleteRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteResponse.ProtoReflect.Descriptor instead.
func (*DeleteRouteResponse) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteRouteResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeleteRouteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteRouteResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Запрос списка всех маршрутов
type ListRoutesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                         // Номер страницы
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // Размер страницы
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRoutesRequest) Reset() {
	*x = ListRoutesRequest{}
	mi := &file_road_marking_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesRequest) ProtoMessage() {}

func (x *ListRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesRequest.ProtoReflect.Descriptor instead.
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{12}
}

func (x *ListRoutesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRoutesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Ответ со списком маршрутов
type ListRoutesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                 // Статус операции
	Routes        []*Route               `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`                                 // Список маршрутов
	TotalRoutes   int32                  `protobuf:"varint,3,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`   // Общее количество маршрутов
	Page          int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`                                    // Текущая страница
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`            // Размер страницы
	ErrorMessage  string                 `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Сообщение об ошибке (если есть)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRoutesResponse) Reset() {
	*x = ListRoutesResponse{}
	mi := &file_road_marking_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesResponse) ProtoMessage() {}

func (x *ListRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{13}
}

func (x *ListRoutesResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListRoutesResponse) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *ListRoutesResponse) GetTotalRoutes() int32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *ListRoutesResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRoutesResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRoutesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Запрос на проверку здоровья сервиса
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_road_marking_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{14}
}

// Ответ проверки здоровья
type HealthCheckResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Status            string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                                 // Статус сервиса
	ModelLoaded       bool                   `protobuf:"varint,2,opt,name=model_loaded,json=modelLoaded,proto3" json:"model_loaded,omitempty"`                   // Загружена ли модель
	Version           string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                                               // Версия сервиса
	DatabaseConnected bool                   `protobuf:"varint,4,opt,name=database_connected,json=databaseConnected,proto3" json:"database_connected,omitempty"` // Подключена ли БД
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_road_marking_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_road_marking_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_road_marking_proto_rawDescGZIP(), []int{15}
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetModelLoaded() bool {
	if x != nil {
		return x.ModelLoaded
	}
	return false
}

func (x *HealthCheckResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthCheckResponse) GetDatabaseConnected() bool {
	if x != nil {
		return x.DatabaseConnected
	}
	return false
}

var File_road_marking_proto protoreflect.FileDescriptor

const file_road_marking_proto_rawDesc = "" +
	"\n" +
	"\x12road_marking.proto\x12\froad_marking\x1a\x1fgoogle/protobuf/timestamp.proto\"1\n" +
	"\vCoordinates\x12\x10\n" +
	"\x03lat\x18\x01 \x01(\x01R\x03lat\x12\x10\n" +
	"\x03lon\x18\x02 \x01(\x01R\x03lon\"\x9a\x02\n" +
	"\x19AnalyzeRoadMarkingRequest\x12\x1d\n" +
	"\n" +
	"video_data\x18\x01 \x01(\fR\tvideoData\x12%\n" +
	"\x0evideo_filename\x18\x02 \x01(\tR\rvideoFilename\x12:\n" +
	"\vstart_point\x18\x03 \x01(\v2\x19.road_marking.CoordinatesR\n" +
	"startPoint\x126\n" +
	"\tend_point\x18\x04 \x01(\v2\x19.road_marking.CoordinatesR\bendPoint\x12(\n" +
	"\x10segment_length_m\x18\x05 \x01(\x05R\x0esegmentLengthM\x12\x19\n" +
	"\broute_id\x18\x06 \x01(\tR\arouteId\"\xa3\x02\n" +
	"\vSegmentInfo\x12\x1d\n" +
	"\n" +
	"segment_id\x18\x01 \x01(\x05R\tsegmentId\x12!\n" +
	"\fframes_count\x18\x02 \x01(\x05R\vframesCount\x12/\n" +
	"\x13coverage_percentage\x18\x03 \x01(\x01R\x12coveragePercentage\x12\x19\n" +
	"\bhas_data\x18\x04 \x01(\bR\ahasData\x12D\n" +
	"\x10start_coordinate\x18\x05 \x01(\v2\x19.road_marking.CoordinatesR\x0fstartCoordinate\x12@\n" +
	"\x0eend_coordinate\x18\x06 \x01(\v2\x19.road_marking.CoordinatesR\rendCoordinate\"\x99\x02\n" +
	"\fOverallStats\x12!\n" +
	"\ftotal_frames\x18\x01 \x01(\x05R\vtotalFrames\x122\n" +
	"\x15total_distance_meters\x18\x02 \x01(\x01R\x13totalDistanceMeters\x122\n" +
	"\x15segment_length_meters\x18\x03 \x01(\x05R\x13segmentLengthMeters\x12%\n" +
	"\x0etotal_segments\x18\x04 \x01(\x05R\rtotalSegments\x12,\n" +
	"\x12segments_with_data\x18\x05 \x01(\x05R\x10segmentsWithData\x12)\n" +
	"\x10average_coverage\x18\x06 \x01(\x01R\x0faverageCoverage\"\xc2\x03\n" +
	"\x05Route\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12:\n" +
	"\vstart_point\x18\x03 \x01(\v2\x19.road_marking.CoordinatesR\n" +
	"startPoint\x126\n" +
	"\tend_point\x18\x04 \x01(\v2\x19.road_marking.CoordinatesR\bendPoint\x12(\n" +
	"\x10segment_length_m\x18\x05 \x01(\x05R\x0esegmentLengthM\x12?\n" +
	"\roverall_stats\x18\x06 \x01(\v2\x1a.road_marking.OverallStatsR\foverallStats\x125\n" +
	"\bsegments\x18\a \x03(\v2\x19.road_marking.SegmentInfoR\bsegments\x129\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12%\n" +
	"\x0evideo_filename\x18\t \x01(\tR\rvideoFilename\x12\x1d\n" +
	"\n" +
	"video_path\x18\n" +
	" \x01(\tR\tvideoPath\"\x86\x02\n" +
	"\x1aAnalyzeRoadMarkingResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12?\n" +
	"\roverall_stats\x18\x03 \x01(\v2\x1a.road_marking.OverallStatsR\foverallStats\x125\n" +
	"\bsegments\x18\x04 \x03(\v2\x19.road_marking.SegmentInfoR\bsegments\x12\x19\n" +
	"\broute_id\x18\x05 \x01(\tR\arouteId\x12#\n" +
	"\rerror_message\x18\x06 \x01(\tR\ferrorMessage\"\x8e\x01\n" +
	"\x18GetSegmentsByAreaRequest\x128\n" +
	"\n" +
	"north_east\x18\x01 \x01(\v2\x19.road_marking.CoordinatesR\tnorthEast\x128\n" +
	"\n" +
	"south_west\x18\x02 \x01(\v2\x19.road_marking.CoordinatesR\tsouthWest\"\xa8\x01\n" +
	"\x19GetSegmentsByAreaResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12+\n" +
	"\x06routes\x18\x02 \x03(\v2\x13.road_marking.RouteR\x06routes\x12!\n" +
	"\ftotal_routes\x18\x03 \x01(\x05R\vtotalRoutes\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\",\n" +
	"\x0fGetRouteRequest\x12\x19\n" +
	"\broute_id\x18\x01 \x01(\tR\arouteId\"z\n" +
	"\x10GetRouteResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12)\n" +
	"\x05route\x18\x02 \x01(\v2\x13.road_marking.RouteR\x05route\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"/\n" +
	"\x12DeleteRouteRequest\x12\x19\n" +
	"\broute_id\x18\x01 \x01(\tR\arouteId\"l\n" +
	"\x13DeleteRouteResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"D\n" +
	"\x11ListRoutesRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\"\xd2\x01\n" +
	"\x12ListRoutesResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12+\n" +
	"\x06routes\x18\x02 \x03(\v2\x13.road_marking.RouteR\x06routes\x12!\n" +
	"\ftotal_routes\x18\x03 \x01(\x05R\vtotalRoutes\x12\x12\n" +
	"\x04page\x18\x04 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x05 \x01(\x05R\bpageSize\x12#\n" +
	"\rerror_message\x18\x06 \x01(\tR\ferrorMessage\"\x14\n" +
	"\x12HealthCheckRequest\"\x99\x01\n" +
	"\x13HealthCheckResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12!\n" +
	"\fmodel_loaded\x18\x02 \x01(\bR\vmodelLoaded\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12-\n" +
	"\x12database_connected\x18\x04 \x01(\bR\x11databaseConnected2\xa7\x04\n" +
	"\x12RoadMarkingService\x12g\n" +
	"\x12AnalyzeRoadMarking\x12'.road_marking.AnalyzeRoadMarkingRequest\x1a(.road_marking.AnalyzeRoadMarkingResponse\x12d\n" +
	"\x11GetSegmentsByArea\x12&.road_marking.GetSegmentsByAreaRequest\x1a'.road_marking.GetSegmentsByAreaResponse\x12I\n" +
	"\bGetRoute\x12\x1d.road_marking.GetRouteRequest\x1a\x1e.road_marking.GetRouteResponse\x12R\n" +
	"\vDeleteRoute\x12 .road_marking.DeleteRouteRequest\x1a!.road_marking.DeleteRouteResponse\x12O\n" +
	"\n" +
	"ListRoutes\x12\x1f.road_marking.ListRoutesRequest\x1a .road_marking.ListRoutesResponse\x12R\n" +
	"\vHealthCheck\x12 .road_marking.HealthCheckRequest\x1a!.road_marking.HealthCheckResponseB-Z+github.com/road-detector/proto/road_markingb\x06proto3"

var (
	file_road_marking_proto_rawDescOnce sync.Once
	file_road_marking_proto_rawDescData []byte
)

func file_road_marking_proto_rawDescGZIP() []byte {
	file_road_marking_proto_rawDescOnce.Do(func() {
		file_road_marking_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_road_marking_proto_rawDesc), len(file_road_marking_proto_rawDesc)))
	})
	return file_road_marking_proto_rawDescData
}

var file_road_marking_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_road_marking_proto_goTypes = []any{
	(*Coordinates)(nil),                // 0: road_marking.Coordinates
	(*AnalyzeRoadMarkingRequest)(nil),  // 1: road_marking.AnalyzeRoadMarkingRequest
	(*SegmentInfo)(nil),                // 2: road_marking.SegmentInfo
	(*OverallStats)(nil),               // 3: road_marking.OverallStats
	(*Route)(nil),                      // 4: road_marking.Route
	(*AnalyzeRoadMarkingResponse)(nil), // 5: road_marking.AnalyzeRoadMarkingResponse
	(*GetSegmentsByAreaRequest)(nil),   // 6: road_marking.GetSegmentsByAreaRequest
	(*GetSegmentsByAreaResponse)(nil),  // 7: road_marking.GetSegmentsByAreaResponse
	(*GetRouteRequest)(nil),            // 8: road_marking.GetRouteRequest
	(*GetRouteResponse)(nil),           // 9: road_marking.GetRouteResponse
	(*DeleteRouteRequest)(nil),         // 10: road_marking.DeleteRouteRequest
	(*DeleteRouteResponse)(nil),        // 11: road_marking.DeleteRouteResponse
	(*ListRoutesRequest)(nil),          // 12: road_marking.ListRoutesRequest
	(*ListRoutesResponse)(nil),         // 13: road_marking.ListRoutesResponse
	(*HealthCheckRequest)(nil),         // 14: road_marking.HealthCheckRequest
	(*HealthCheckResponse)(nil),        // 15: road_marking.HealthCheckResponse
	(*timestamppb.Timestamp)(nil),      // 16: google.protobuf.Timestamp
}
var file_road_marking_proto_depIdxs = []int32{
	0,  // 0: road_marking.AnalyzeRoadMarkingRequest.start_point:type_name -> road_marking.Coordinates
	0,  // 1: road_marking.AnalyzeRoadMarkingRequest.end_point:type_name -> road_marking.Coordinates
	0,  // 2: road_marking.SegmentInfo.start_coordinate:type_name -> road_marking.Coordinates
	0,  // 3: road_marking.SegmentInfo.end_coordinate:type_name -> road_marking.Coordinates
	0,  // 4: road_marking.Route.start_point:type_name -> road_marking.Coordinates
	0,  // 5: road_marking.Route.end_point:type_name -> road_marking.Coordinates
	3,  // 6: road_marking.Route.overall_stats:type_name -> road_marking.OverallStats
	2,  // 7: road_marking.Route.segments:type_name -> road_marking.SegmentInfo
	16, // 8: road_marking.Route.created_at:type_name -> google.protobuf.Timestamp
	3,  // 9: road_marking.AnalyzeRoadMarkingResponse.overall_stats:type_name -> road_marking.OverallStats
	2,  // 10: road_marking.AnalyzeRoadMarkingResponse.segments:type_name -> road_marking.SegmentInfo
	0,  // 11: road_marking.GetSegmentsByAreaRequest.north_east:type_name -> road_marking.Coordinates
	0,  // 12: road_marking.GetSegmentsByAreaRequest.south_west:type_name -> road_marking.Coordinates
	4,  // 13: road_marking.GetSegmentsByAreaResponse.routes:type_name -> road_marking.Route
	4,  // 14: road_marking.GetRouteResponse.route:type_name -> road_marking.Route
	4,  // 15: road_marking.ListRoutesResponse.routes:type_name -> road_marking.Route
	1,  // 16: road_marking.RoadMarkingService.AnalyzeRoadMarking:input_type -> road_marking.AnalyzeRoadMarkingRequest
	6,  // 17: road_marking.RoadMarkingService.GetSegmentsByArea:input_type -> road_marking.GetSegmentsByAreaRequest
	8,  // 18: road_marking.RoadMarkingService.GetRoute:input_type -> road_marking.GetRouteRequest
	10, // 19: road_marking.RoadMarkingService.DeleteRoute:input_type -> road_marking.DeleteRouteRequest
	12, // 20: road_marking.RoadMarkingService.ListRoutes:input_type -> road_marking.ListRoutesRequest
	14, // 21: road_marking.RoadMarkingService.HealthCheck:input_type -> road_marking.HealthCheckRequest
	5,  // 22: road_marking.RoadMarkingService.AnalyzeRoadMarking:output_type -> road_marking.AnalyzeRoadMarkingResponse
	7,  // 23: road_marking.RoadMarkingService.GetSegmentsByArea:output_type -> road_marking.GetSegmentsByAreaResponse
	9,  // 24: road_marking.RoadMarkingService.GetRoute:output_type -> road_marking.GetRouteResponse
	11, // 25: road_marking.RoadMarkingService.DeleteRoute:output_type -> road_marking.DeleteRouteResponse
	13, // 26: road_marking.RoadMarkingService.ListRoutes:output_type -> road_marking.ListRoutesResponse
	15, // 27: road_marking.RoadMarkingService.HealthCheck:output_type -> road_marking.HealthCheckResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_road_marking_proto_init() }
func file_road_marking_proto_init() {
	if File_road_marking_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_road_marking_proto_rawDesc), len(file_road_marking_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_road_marking_proto_goTypes,
		DependencyIndexes: file_road_marking_proto_depIdxs,
		MessageInfos:      file_road_marking_proto_msgTypes,
	}.Build()
	File_road_marking_proto = out.File
	file_road_marking_proto_goTypes = nil
	file_road_marking_proto_depIdxs = nil
}
