// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: road_marking.proto

package road_marking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoadMarkingService_AnalyzeRoadMarking_FullMethodName = "/road_marking.RoadMarkingService/AnalyzeRoadMarking"
	RoadMarkingService_GetSegmentsByArea_FullMethodName  = "/road_marking.RoadMarkingService/GetSegmentsByArea"
	RoadMarkingService_GetRoute_FullMethodName           = "/road_marking.RoadMarkingService/GetRoute"
	RoadMarkingService_DeleteRoute_FullMethodName        = "/road_marking.RoadMarkingService/DeleteRoute"
	RoadMarkingService_ListRoutes_FullMethodName         = "/road_marking.RoadMarkingService/ListRoutes"
	RoadMarkingService_HealthCheck_FullMethodName        = "/road_marking.RoadMarkingService/HealthCheck"
)

// RoadMarkingServiceClient is the client API for RoadMarkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для анализа дорожной разметки
type RoadMarkingServiceClient interface {
	// Анализ дорожной разметки в видео
	AnalyzeRoadMarking(ctx context.Context, in *AnalyzeRoadMarkingRequest, opts ...grpc.CallOption) (*AnalyzeRoadMarkingResponse, error)
	// Получение сегментов по области координат
	GetSegmentsByArea(ctx context.Context, in *GetSegmentsByAreaRequest, opts ...grpc.CallOption) (*GetSegmentsByAreaResponse, error)
	// Получение маршрута по ID
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	// Удаление маршрута по ID
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error)
	// Получение списка всех маршрутов
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	// Проверка здоровья сервиса
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type roadMarkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoadMarkingServiceClient(cc grpc.ClientConnInterface) RoadMarkingServiceClient {
	return &roadMarkingServiceClient{cc}
}

func (c *roadMarkingServiceClient) AnalyzeRoadMarking(ctx context.Context, in *AnalyzeRoadMarkingRequest, opts ...grpc.CallOption) (*AnalyzeRoadMarkingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeRoadMarkingResponse)
	err := c.cc.Invoke(ctx, RoadMarkingService_AnalyzeRoadMarking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadMarkingServiceClient) GetSegmentsByArea(ctx context.Context, in *GetSegmentsByAreaRequest, opts ...grpc.CallOption) (*GetSegmentsByAreaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSegmentsByAreaResponse)
	err := c.cc.Invoke(ctx, RoadMarkingService_GetSegmentsByArea_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadMarkingServiceClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteResponse)
	err := c.cc.Invoke(ctx, RoadMarkingService_GetRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadMarkingServiceClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRouteResponse)
	err := c.cc.Invoke(ctx, RoadMarkingService_DeleteRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadMarkingServiceClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, RoadMarkingService_ListRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadMarkingServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, RoadMarkingService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoadMarkingServiceServer is the server API for RoadMarkingService service.
// All implementations must embed UnimplementedRoadMarkingServiceServer
// for forward compatibility.
//
// Сервис для анализа дорожной разметки
type RoadMarkingServiceServer interface {
	// Анализ дорожной разметки в видео
	AnalyzeRoadMarking(context.Context, *AnalyzeRoadMarkingRequest) (*AnalyzeRoadMarkingResponse, error)
	// Получение сегментов по области координат
	GetSegmentsByArea(context.Context, *GetSegmentsByAreaRequest) (*GetSegmentsByAreaResponse, error)
	// Получение маршрута по ID
	GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	// Удаление маршрута по ID
	DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error)
	// Получение списка всех маршрутов
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	// Проверка здоровья сервиса
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedRoadMarkingServiceServer()
}

// UnimplementedRoadMarkingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoadMarkingServiceServer struct{}

func (UnimplementedRoadMarkingServiceServer) AnalyzeRoadMarking(context.Context, *AnalyzeRoadMarkingRequest) (*AnalyzeRoadMarkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeRoadMarking not implemented")
}
func (UnimplementedRoadMarkingServiceServer) GetSegmentsByArea(context.Context, *GetSegmentsByAreaRequest) (*GetSegmentsByAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentsByArea not implemented")
}
func (UnimplementedRoadMarkingServiceServer) GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedRoadMarkingServiceServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedRoadMarkingServiceServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedRoadMarkingServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRoadMarkingServiceServer) mustEmbedUnimplementedRoadMarkingServiceServer() {}
func (UnimplementedRoadMarkingServiceServer) testEmbeddedByValue()                            {}

// UnsafeRoadMarkingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoadMarkingServiceServer will
// result in compilation errors.
type UnsafeRoadMarkingServiceServer interface {
	mustEmbedUnimplementedRoadMarkingServiceServer()
}

func RegisterRoadMarkingServiceServer(s grpc.ServiceRegistrar, srv RoadMarkingServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoadMarkingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoadMarkingService_ServiceDesc, srv)
}

func _RoadMarkingService_AnalyzeRoadMarking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRoadMarkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadMarkingServiceServer).AnalyzeRoadMarking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadMarkingService_AnalyzeRoadMarking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadMarkingServiceServer).AnalyzeRoadMarking(ctx, req.(*AnalyzeRoadMarkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadMarkingService_GetSegmentsByArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentsByAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadMarkingServiceServer).GetSegmentsByArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadMarkingService_GetSegmentsByArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadMarkingServiceServer).GetSegmentsByArea(ctx, req.(*GetSegmentsByAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadMarkingService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadMarkingServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadMarkingService_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadMarkingServiceServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadMarkingService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadMarkingServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadMarkingService_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadMarkingServiceServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadMarkingService_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadMarkingServiceServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadMarkingService_ListRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadMarkingServiceServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadMarkingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadMarkingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadMarkingService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadMarkingServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoadMarkingService_ServiceDesc is the grpc.ServiceDesc for RoadMarkingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoadMarkingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "road_marking.RoadMarkingService",
	HandlerType: (*RoadMarkingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeRoadMarking",
			Handler:    _RoadMarkingService_AnalyzeRoadMarking_Handler,
		},
		{
			MethodName: "GetSegmentsByArea",
			Handler:    _RoadMarkingService_GetSegmentsByArea_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _RoadMarkingService_GetRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _RoadMarkingService_DeleteRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _RoadMarkingService_ListRoutes_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RoadMarkingService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "road_marking.proto",
}
